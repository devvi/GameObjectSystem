#include <vector>
#include <string>
#include <map>

namespace OIS
{
    enum Type
	{
		OISUnknown   = 0,
		OISKeyboard  = 1,
		OISMouse     = 2,
		OISJoyStick  = 3,
		OISTablet    = 4
	};

	//--------     Shared common components    ------------------------//

	//! Base type for all device components (button, axis, etc)
    enum ComponentType
	{
		OIS_Unknown = 0,
		OIS_Button  = 1, //ie. Key, mouse button, joy button, etc
		OIS_Axis    = 2, //ie. A joystick or mouse axis
		OIS_Slider  = 3, //
		OIS_POV     = 4, //ie. Arrow direction keys
		OIS_Vector3 = 5  //ie. WiiMote orientation
	};

	//! Base of all device components (button, axis, etc)
	class Component
	{
	public:
		Component() : cType(OIS_Unknown) {};
		Component(ComponentType type) : cType(type) {};
		
		ComponentType cType;
	};

	//! Button can be a keyboard key, mouse button, etc
	class Button : public Component
	{
	public:
		Button() {}
		Button(bool bPushed) : Component(OIS_Button), pushed(bPushed) {};
		//! true if pushed, false otherwise
		bool pushed;
	};

	//! Axis component
	class Axis : public Component
	{
	public:
		Axis() : Component(OIS_Axis), abs(0), rel(0), absOnly(false) {};

		//! Absoulte and Relative value components
		int abs, rel;

		//! Indicates if this Axis only supports Absoulte (ie JoyStick)
		bool absOnly;

		//! Used internally by OIS
		void clear()
		{
			abs = rel = 0;
		}
	};

	//! A 3D Vector component (perhaps an orientation, as in the WiiMote)
	class Vector3 : public Component
	{
	public:
		Vector3() {}
		Vector3(float _x, float _y, float _z) : Component(OIS_Vector3), x(_x), y(_y), z(_z) {};
		
		//! X component of vector
		float x;
		
		//! Y component of vector
		float y;

		//! Z component of vector
		float z;

		void clear()
		{
			x = y = z = 0.0f;
		}
	};
}

