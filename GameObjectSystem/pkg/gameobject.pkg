typedef int TYPE_ID;

class GameObject
{
public:
	void addGC(GameComponent* gameComponent);
	void detachGC(GameComponent* gameComponent);
	GameComponent* getGC(TYPE_ID gc_type);
	GameComponent* getUserGC(TYPE_ID user_type);
	void removeGC(TYPE_ID gc_type);
	bool hasGC(TYPE_ID gc_type);
	bool hasUserGC(TYPE_ID user_type);
	GameComponent* getUserGC(TYPE_ID user_type);
	void removeAllGC();
	void traverseUserFunction(const char* functionName);
};

class GameComponent
{
public:
	virtual void onUpdate(float interval);
	virtual void onAttachObject();
	virtual void onDetachObject();
	TYPE_ID getType();
	void setGameObejct(GameObject* go);
	void detachFromObject();
	void setUserType(TYPE_ID type);
	TYPE_ID getUserType();
	GameObject* getGameObject();
};
class GameObjectManager
{
public:
	GameObject* createGameObject(const std::string& name = "default");
	GameObject* getGameObject(const std::string& name);
	void releaseGameObject(const std::string& name);
	void releaseGameObject(GameObject* gameObject);
	void callUserFunction(const char* functionName);  
};

class GameComponentFactory
{
public:
	GameComponentFactory();
	virtual ~GameComponentFactory();
	virtual GameComponent* createComponent();
	virtual void releaseGameComponent(GameComponent* gc);
};

class GameComponentManager
{
public:
	GameComponent* createGameComponent(TYPE_ID gc_type, TYPE_ID user_type = INVALID, GameObject* gameObject = NULL);
	void releaseGameComponent(GameComponent* gameComponent);
	void setFactory(TYPE_ID type, GameComponentFactory* factory);
	bool hasFactory(TYPE_ID type);
	void registerUserComponent(TYPE_ID type, std::string& typeName);
	//void shutdown();
};

class GCNode:public GameComponent
{
public:	
	void onUpdate(float interval);
	void onAttachObject();
	void onDetachObject();
	Ogre::SceneNode* getOgreNode();
	void translate( Ogre::Vector3 &pos);
	void setPosition(Ogre::Vector3 &pos);
	void setWorldPosition(Ogre::Vector3 &pos);
	Ogre::Vector3 getPosition();
	Ogre::Vector3 getWorldPosition();
	void setOrientation(Ogre::Quaternion& orient);
	void setVisible(bool isVisible);
	void roll(float value);
	void pitch(float value);
	void yaw(float value);
	void attachNode(GCNode* child);
	void detachNode(GCNode* child);
	void detachFromParentNode();
	void attachOgreObject(Ogre::MovableObject* object);
	void detachOgreObject(Ogre::MovableObject* object);
	void scale(float x, float y, float z);
};
class GCCamera:public GameComponent
{
public:	
	void initCamera(const std::string& cameraName);
	Ogre::Camera* getOgreCamera();
};

class GCEntity: public GameComponent
{
public:
	void initEntity(const std::string& entityName,  const std::string& modelName);
	void onUpdate(float interval);
	void onAttachObject();
	void onDetachObject();
	bool attachToOgreNode();
	bool detachFromOgreNode();
	Ogre::Entity* getOgreEntity();
	std::string getModelName();
	std::string getEntityName();
	void setMaterialName(const std::string& materialName);

};

class OgreEntityComponentFactory :public GameComponentFactory
{
public:
	OgreEntityComponentFactory();
	~OgreEntityComponentFactory();
};

class CameraComponentFactory :public GameComponentFactory
{
public:
	CameraComponentFactory();
	~CameraComponentFactory();
};

class NodeComponentFactory :public GameComponentFactory
{
public:
	NodeComponentFactory();
	~NodeComponentFactory();
};

class UserComponent: public GameComponent
{
public:
	void onUpdate(float interval);
	void onAttachObject();
	void onDetachObject();

};

class UserComponentFactory: public GameComponentFactory
{
public:
	UserComponentFactory();
	~UserComponentFactory();
};

enum CollisionFlags
	{
		CF_DEFAULT = 0,
		CF_STATIC_OBJECT= 1,
		CF_KINEMATIC_OBJECT= 2,
		CF_NO_CONTACT_RESPONSE = 4,
		CF_CUSTOM_MATERIAL_CALLBACK = 8,//this allows per-triangle material (friction/restitution)
		CF_CHARACTER_OBJECT = 16,
		CF_DISABLE_VISUALIZE_OBJECT = 32, //disable debug drawing
		CF_DISABLE_SPU_COLLISION_PROCESSING = 64//disable parallel/SPU processing
	};

class PhysicsBody: public GameComponent
{
public:
	void initBody(float mass,  unsigned int id, CollisionFlags flag = CF_DEFAULT);
	unsigned int getCollisionID();
	void setCollisionID(unsigned int id);
	void setMass(float mass);
	void impulse(Ogre::Vector3& offset);
	void setNeedCallBack(bool needCallBcak);
	bool needCallBack();
};

class PhysicsBodyComponentFactory: public GameComponentFactory
{
public:
	PhysicsBodyComponentFactory();
	~PhysicsBodyComponentFactory();
};





